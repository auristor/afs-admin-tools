#!/usr/local/bin/perl -w

require 5.003; # I prototype a sub below.

use File::Find;

$checktext = 1; # Default is to check text differences
if ($ARGV[0] eq '-T') { shift; $checktext = 0; }

$argc = @ARGV;
die "Too many arguments: frak rw [ro]\n" if ($argc > 2);

$rw = $ARGV[0];
if ( $argc == 1 && length($rw) >= 7 && substr($rw,0,7) eq '/afs/ir' ) {
    warn "Warning: RW path argument specified RO syntax, autocorrecting\n";
    substr($rw,0,7) = "/afs/.ir";
}

$ro = ( $argc == 2 ? $ARGV[1] : $rw ) ;
$rw =~ s:^/afs/\.ir(\.stanford\.edu)?/:/afs/.ir.stanford.edu/: ;
$ro =~ s:^/afs/(\.)?ir(\.stanford\.edu)?/:/afs/ir.stanford.edu/: ;

$startrw = $rw;
$startro = $ro;

$| = 1;

sub getacl ($) {
    my ($dir) = @_;
    my $acl = "";
    my $prefix = "";
    local $_;

    open(LISTACL, "/usr/pubsw/bin/fs listacl $dir |") 
        or die "Unable to perform listacl on $dir: $!\n";
    while (<LISTACL>) {
        next if ( $. <= 1 );
        next if /Normal rights:/;
        if ( /Negative rights:/ ) { $prefix = "--" ; next; } ;
        ($ptsentity, $permissions) = split(' ');
        $permissions =~ s/rlidwka/all/;
        $acl .= "$prefix$ptsentity=$permissions,"
    }
    close(LISTACL);
    $acl =~ s/,$//;
    return $acl;
}

sub wantedrw {
    $rw = $File::Find::name;
    $ro = $rw;
    $ro =~ s:^\Q$startrw\E:$startro: ;
    ($rwtrim = $rw) =~ s/\.stanford\.edu//;

    ($rwdev,$rwino,$rwmode,$rwlink,$rwuid,
     $rwgid,$rwrdev,$rwsize,$rwatime,
     $rwmtime,$rwctime,$rwblksize,$rwblocks) = lstat($rw);
    $rwexists = (-e _);
    $rwislink = (-l _);
    $rwlink = readlink ($rw) if $rwislink;
    $rwisdir  = (-d _);
    if ( $rwisdir ) {
        $rwmtpt = `/usr/pubsw/bin/fs lsmount $rw  2>&1`;
        $rwismtpt = ( $? == 0 ) ;
        $rwmtpt =~ s/.*a mount point for volume \'\#(\S+)\'\s+$/$1/ 
            if $rwismtpt;
        $rwacl = getacl($rw);
    }

    ($rodev,$roino,$romode,$rolink,$rouid,
     $rogid,$rordev,$rosize,$roatime,
     $romtime,$roctime,$roblksize,$roblocks) = lstat($ro);
    $roexists = (-e _);
    $roislink = (-l _);
    $rolink = readlink ($ro) if $roislink;
    $roisdir  = (-d _);
    if ($roisdir) {
        $romtpt = `/usr/pubsw/bin/fs lsmount $ro  2>&1`;
        $roismtpt = ( $? == 0 ) ;
        $romtpt =~ s/.*a mount point for volume \'\#(\S+)\'\s+$/$1/ 
            if $roismtpt;
        $roacl = getacl($ro);
    }

    if ( ! $roexists ) { # New things springing into existence
        if ( $rwislink ) {      # New symlink
            print "New link: $rwtrim\n";  
            print "  -> $rwlink\n";
        } elsif ( $rwisdir ) {  # New directory or mountpoint
            if ( $rwismtpt ) {  # New mountpoint
                print "New mountpoint: $rwtrim -> \#$rwmtpt\n";  
                print "  ACL is: $rwacl\n";
                if ( $rw ne $startrw ) { $File::Find::prune = 1; return; }
            } else {            # Directory but not mountpoint
                print "New directory: $rwtrim\n";
                $rwlsout = `/bin/ls -ld $rw`;
                $rwlsout =~ s/ \S+\s+$//;
                print "  $rwlsout\n";
                print "  ACL is: $rwacl\n";
            }
        } else {                # New, but not a link, dir, or mountpoint
            print "New: $rwtrim\n";
            $rwlsout = `/bin/ls -ld $rw`;
            $rwlsout =~ s/ \S+\s+$//;
            print "  $rwlsout\n";
        }
    } elsif ( $rwislink ) {
        if ( $roislink ) {
            if ( $rwlink ne $rolink ) {
                print "Link change: $rwtrim\n";
                print "  Link WAS: $rolink\n  Link NOW: $rwlink\n";
            }
        } elsif ( $roisdir ) {
            if ( $roismtpt ) {
                print "Mountpoint replaced by link: $rwtrim\n";
                print "  WAS: -> \#$romtpt\n";
                print "  NOW: $rwlink\n";
            } else { 
                print "Directory replaced by link: $rwtrim\n";
                $rolsout = `/bin/ls -ld $ro`;
                $rolsout =~ s/ \S+\s+$//;
                print "  WAS: $rolsout\n";
                print "  NOW: $rwlink\n";
            }
        } else {                # Replaces link, not link, dir, or mountpoint
            print "Non-link replaced by link: $rwtrim\n";
            $rolsout = `/bin/ls -ld $ro`;
            $rolsout =~ s/ \S+\s+$//;
            print "  WAS: $rolsout\n";
            print "  NOW: $rwlink\n";
        } 
    } elsif ( $rwisdir ) {
        if ( $rwismtpt ) {
            if ( $roislink ) {
                print "Link replaced by mountpoint: $rwtrim\n";
                print "  WAS: $rolink\n";
                print "  NOW: -> \#$rwmtpt\n";
                if ( $rw ne $startrw ) { $File::Find::prune = 1; return; }
            } elsif ( $roisdir ) {
                if ( $roismtpt ) {
                    if ( $rwmtpt ne $romtpt ) {
                        print "Mountpoint change: $rwtrim\n";
                        print "  WAS: -> $romtpt\n";
                        print "  NOW: -> $rwmtpt\n";
                    }
                    if ( $rwacl ne $roacl ) {
                        print "ACL changed: $rwtrim\n";
                        print "  ACL WAS: $roacl\n";
                        print "  ACL NOW: $rwacl\n";
                    }
                    if ( $rw ne $startrw ) { $File::Find::prune = 1; return; }
                } else {        # RW is mtpt, RO is regular dir
                    print "Directory replaced by mountpoint: $rwtrim\n";
                    $rolsout = `/bin/ls -ld $ro`;
                    $rolsout =~ s/ \S+\s+$//;
                    print "  WAS: $rolsout\n";
                    print "  NOW: -> \#$rwmtpt\n";
                    if ( $rw ne $startrw ) { $File::Find::prune = 1; return; }
                }
            } else {            # RW is mtpt, RO neither link, dir or mtpt
                print "File replaced by mountpoint: $rwtrim\n";
                $rolsout = `/bin/ls -ld $ro`;
                $rolsout =~ s/ \S+\s+$//;
                print "  WAS: $rolsout\n";
                print "  NOW: -> \#$rwmtpt\n";
                if ( $rw ne $startrw ) { $File::Find::prune = 1; return; }
            }
        } else {                # RW is Regular directory, not mountpoint
            $rwlsout = `/bin/ls -ld $rw`;
            $rwlsout =~ s/ \S+\s+$//;
            if ( $roislink ) {
                print "Link replaced by directory: $rwtrim\n";
                print "  WAS: $rolink\n";
                print "  NOW: $rwlsout\n";
            } elsif ( $roisdir ) { # RW is regular dir, RO is dir
                if ( $roismtpt ) { # RW regular dir, RO mtpt
                    print "Mountpoint replaced by directory: $rwtrim\n";
                    print "  WAS: -> \#$romtpt\n";
                    print "  NOW: $rwlsout\n";
                } else {        # RW and RO are both regular directories
                    $rolsout = `/bin/ls -ld $ro`;
                    $rolsout =~ s/ \S+\s+$//;
                    if ( $rwlsout ne $rolsout ) {
                        print "Changed (dirs): $rwtrim\n";
                        print "  WAS: $rolsout\n";
                        print "  NOW: $rwlsout\n";
                    }
                }
                if ( $rwacl ne $roacl ) {
                    print "ACL changed: $rwtrim\n";
                    print "  ACL WAS: $roacl\n";
                    print "  ACL NOW: $rwacl\n";
                }
            } else {            # RW is regular dir, RO is neither link, dir, or mtpt
                print "File replaced by directory: $rwtrim\n";
                $rolsout = `/bin/ls -ld $ro`;
                $rolsout =~ s/ \S+\s+$//;
                print "  WAS: $rolsout\n";
                print "  NOW: $rwlsout\n"
                }
        } 
    } else {                    # RW is not link, directory, or mountpoint
        $rwlsout = `/bin/ls -ld $rw`;
        $rwlsout =~ s/ \S+\s+$//;
        if ( $roislink ) {      # RW is file, RO is link
            print "Link replaced by non-link: $rwtrim\n";
            print "  WAS: $rolink\n";
            print "  NOW: $rwlsout\n";
        } elsif ( $roisdir ) {  # RW is file, RO is dir or mtpt
            if ( $roismtpt ) {  # RW is file, RO is mountpoint
                print "Mountpoint replaced by non-mountpoint: $rwtrim\n";
                print "  WAS: -> \#$romtpt\n";
            } else {            # RW is file, RO is regular dir
                $rolsout = `/bin/ls -ld $ro`;
                $rolsout =~ s/ \S+\s+$//;
                print "Directory replaced by non-directory: $rwtrim\n";
                print "  WAS: $rolsout\n";
            }
            print "  NOW: $rwlsout\n";
        } else {                # RW is file, RO is too.
            $rolsout = `/bin/ls -ld $ro`;
            $rolsout =~ s/ \S+\s+$//;
            if ( $rwlsout ne $rolsout ){
                print "Changed: $rwtrim\n";
                print "  WAS: $rolsout\n";
                print "  NOW: $rwlsout\n";
                if ($checktext && -T $rw && -T $ro) {
                    local $_;
                    
                    open(DIFFOUT, "/usr/pubsw/bin/diff -u $ro $rw|") 
                        or die "Can't fork diff: $!\n";
                    while (<DIFFOUT>) {
                        if ($. <= 2) {
                            s/(\Q$startrw\E|\Q$startro\E)/.../;
                        }
                        print;
                    }
                    close(DIFFOUT);
                }
            }
        }
    }
}

sub wantedro {
    $ro = $File::Find::name;
    return if ($ro eq $startro);
    $rw = $ro;
    $rw =~ s:^\Q$startro\E:$startrw: ;
    ($rotrim = $ro) =~ s/\.stanford\.edu//;

    $rwmtpt = `/usr/pubsw/bin/fs lsmount $rw  2>&1`;
    $rwismtpt = ( $? == 0 ) ;
    $rwmtpt =~ s/.*a mount point for volume \'\#(\S+)\'\s+$/$1/ 
        if $rwismtpt;
    $romtpt = `/usr/pubsw/bin/fs lsmount $ro  2>&1`;
    $roismtpt = ( $? == 0 ) ;
    $romtpt =~ s/.*a mount point for volume \'\#(\S+)\'\s+$/$1/ 
        if $roismtpt;
    ($rwdev,$rwino,$rwmode,$rwlink,$rwuid,
     $rwgid,$rwrdev,$rwsize,$rwatime,
     $rwmtime,$rwctime,$rwblksize,$rwblocks) = lstat($rw);
    ($rodev,$roino,$romode,$rolink,$rouid,
     $rogid,$rordev,$rosize,$roatime,
     $romtime,$roctime,$roblksize,$roblocks) = lstat($ro);
    $roexists = (-e _);
    $roislink = (-l _);
    $rolink = readlink($ro) if $roislink;
    $roisdir = (-d _);
    if ($roisdir) {
        $romtpt = `/usr/pubsw/bin/fs lsmount $ro  2>&1`;
        $roismtpt = ( $? == 0 ) ;
        $romtpt =~ s/.*a mount point for volume \'\#(\S+)\'/$1/ if $roismtpt;
    }


    if ( ! $rwexists ) {
        if ( $roislink ) {
            print "Deleted link: $rotrim\n" ;
            print "  -> $rolink\n";
        } elsif ( $roisdir ) {
            if ( $roismtpt ) {
                print "Deleted mountpoint: $rotrim -> \#$romtpt\n";  
                if ( $ro ne $startro ) { $File::Find::prune = 1; return; }
            } else {
                print "Deleted directory: $rotrim\n";
#                $rolsout = `/bin/ls -ld $ro`;
#                $rolsout =~ s/ \S+\s+$//;
#                print "  $rolsout\n";
            }
        } else {
            print "Deleted: $rotrim\n";
#            $rolsout = `/bin/ls -ld $ro`;
#            $rolsout =~ s/ \S+\s+$//;
#            print "  $rolsout\n";
        }
    } elsif ( $roisdir && $roismtpt ) {
        if ( $ro ne $startro ) { $File::Find::prune = 1; return; }
    }
}

$File::Find::dont_use_nlink = 1;

find(\&wantedrw, $rw);
print "\n";
find(\&wantedro, $ro);
print "\n";
