#!/usr/bin/perl
our $VERSION = '2.8 (2025-07-01)';
#
# File: afs-mkmove-ro - Use mvto to move AFS volumes
#
# Description: This script can be used to all the volumes from one
# server to another.  This script processes readonly volumes only.
#
# Author: Bill MacAllister <bill@ca-zephyr.org
#
# Copyright 2008-2015
#    The Board of Trustees of the Leland Stanford Junior University
# Copyright 2018, 2024
#    Bill MacAllister <bill@ca-zephyr.org>

use Getopt::Long;
use Pod::Usage;
use strict;
use warnings;

use vars qw(
  @inParts
  @outParts
  %inPartInfo
  %serverInfo
  $opt_debug
  $opt_freelimit
  $opt_help
  $opt_inserver
  $opt_inparts
  $opt_manual
  $opt_sqllist
  $opt_vollist
  $opt_outserver
  $opt_outparts
  $opt_update
);

# ---------------------------
# Get a datetime string

sub get_datetime {
    my ($now) = @_;
    if (length($now) == 0) {
        $now = time;
    }
    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst)
      = localtime($now);
    $mon++;
    $mon  = sprintf("%02d", $mon);
    $mday = sprintf("%02d", $mday);
    $hour = sprintf("%02d", $hour);
    $min  = sprintf("%02d", $min);
    $sec  = sprintf("%02d", $sec);
    $year += 1900;
    return $year . '-' . $mon . '-' . $mday . '-' . $hour . '-' . $min . '-'
      . $sec;
}

# ---------------------------
# Get a unique filename

sub get_filename {

    my ($in, $out) = @_;

    my $cnt     = 0;
    my $outFile = "./movero-from-$in-to-$out" . '_' . $cnt . '.sh';
    while (-e $outFile) {
        $cnt++;
        $outFile = "./movero-from-$in-to-$out" . '_' . $cnt . '.sh';
    }
    return $outFile;

}

# ---------------------------
# generate and parse output from remctl query of lsdb

sub sql_list {

    my $sql
      = "SELECT server, part, volname, used FROM volumes "
      . "WHERE server = '$opt_inserver' "
      . "AND type = 'RO' ";
    if ($opt_inparts) {
        $sql .= 'AND (';
        my $word = '';
        foreach my $p (@inParts) {
            my $qpart = $p;
            $qpart = "/vicep$p" if length($p) == 1;
            $sql .= "${word}part = '$qpart'";
            $word = ' OR ';
        }
        $sql .= ')';
    }

    my @lines = `remctl lsdb afsdb query "$sql"`;

    foreach my $line (@lines) {
        my ($thisServer, $fullPart, $thisVol, $thisSize) = split(/\s+/, $line);
        if ($thisVol =~ s/\.readonly$//) {
            my $thisPart = $fullPart;
            $thisPart = $1 if ($thisPart =~ /\/vicep(\w+)/);
            $inPartInfo{$thisPart}{$thisVol} = $thisSize;
        }
    }
}

# ---------------------------
# Read and parse vos listvol output

sub vos_list {

    my ($thisFile) = @_;

    if (!-e $thisFile) {
        print("ERROR: volume list file not found ($thisFile)\n");
        exit 1;
    }

    my $thisPart = '';
    open(my $infile, '<', $thisFile);
    while (<$infile>) {
        chomp;
        my $inline = $_;

        if ($inline =~ /partition\s+\/vicep(\w+):\s+/) {
            $thisPart = $1;
            next;
        }

        if ($inline =~ /([\w\d\.\-]+)\s+\d+\s+RO\s+(\d+)\s+\w+\s+On\-line/) {
            my $thisVol  = $1;
            my $thisSize = $2;
            next unless $thisVol =~ s/.readonly$//;
            $inPartInfo{$thisPart}{$thisVol} = $thisSize;
        }
    }

    close $infile;
}

# ---------------------------
# Pick a partition

sub pick_partition {

    my ($in_part, $this_size) = @_;

    my $return_part = '';
    if (scalar(@outParts)) {
        foreach my $p (@outParts) {
            my $currentAvailable = $serverInfo{$opt_outserver}{$p}{'free'};
            my $freeLimit = $serverInfo{$opt_outserver}{$p}{'freelimit'};
            next if ($currentAvailable - $this_size < $opt_freelimit);
            $return_part = $p;
            $serverInfo{$opt_outserver}{$p}{'free'} -= $this_size;
            last;
        }
    } else {
        my $currentAvailable = $serverInfo{$opt_outserver}{$in_part}{'free'};
        my $freeLimit = $serverInfo{$opt_outserver}{$in_part}{'freelimit'};
        if ($currentAvailable - $this_size > $opt_freelimit) {
            $return_part = $in_part;
            $serverInfo{$opt_outserver}{$in_part}{'free'} -= $this_size;
        }
    }

    return $return_part;
}

# ---------------------------
# Main Routine

# -- get options
GetOptions(
    'debug'       => \$opt_debug,
    'freelimit=i' => \$opt_freelimit,
    'help'        => \$opt_help,
    'inserver=s'  => \$opt_inserver,
    'inparts=s'   => \$opt_inparts,
    'manual'      => \$opt_manual,
    'sqllist'     => \$opt_sqllist,
    'vollist=s'   => \$opt_vollist,
    'outserver=s' => \$opt_outserver,
    'outpart=s'   => \$opt_outparts,
    'update'      => \$opt_update
);

# -- help the poor souls out
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 1);
}

if (length($opt_inserver) == 0) {
    print("ERROR:  --inserver is required\n");
    pod2usage(-verbose => 0);
}

if (length($opt_outserver) == 0) {
    print("ERROR: --outserver is required\n");
    pod2usage(-verbose => 0);
}

if ($opt_inserver > 0) {
    $opt_inserver = "afssvr$opt_inserver";
}
if ($opt_outserver > 0) {
    $opt_outserver = "afssvr$opt_outserver";
}
if (!$opt_freelimit)    { $opt_freelimit = 20; }
if ($opt_freelimit > 1) { $opt_freelimit = $opt_freelimit / 100; }

# The list of input partitions
@inParts = ();
if ($opt_inparts) {
    my @pl = split(/,/, $opt_inparts);
    foreach my $p (@pl) {
        push @inParts, $p;
    }
}

# The list of output paritions
@outParts = ();
if ($opt_outparts) {
    my @pl = split(/,/, $opt_outparts);
    foreach my $p (@pl) {
        push @outParts, $p;
    }
}

# Get input partition information and load the parts hash.
# The parts hash structure is: $inPartInfo{paritition}{volumename} = size
if ($opt_sqllist) {
    sql_list();
} elsif ($opt_vollist) {
    vos_list($opt_vollist);
} else {
    if ($opt_inparts) {
        foreach my $p (@inParts) {
            my $list
              = "vollist-${opt_inserver}-${p}-" . get_datetime() . ".txt";
            my $cmd = "vos listvol $opt_inserver $p > $list";
            print("Getting a volume list of $opt_inserver $p ...\n");
            system($cmd);
            vos_list($list);
        }
    } else {
        my $list = "vollist-${opt_inserver}-" . get_datetime() . ".txt";
        my $cmd  = "vos listvol $opt_inserver > $list";
        print("Getting a volume list of $opt_inserver ...\n");
        system($cmd);
        vos_list($list);
        unlink $list;
    }
}

# Get a list of free space available on the output server partitions.
my $partCnt   = 0;
my $info      = `vos partinfo $opt_outserver`;
my @infoLines = split /\n/, $info;
foreach my $p (@infoLines) {
    if ($p =~ /vicep(.):\s+(\d+)[A-Za-z\s]+?(\d+)/) {
        my $thisPart = $1;
        my $thisFree = $2;
        my $thisTot  = $3;
        if ($thisFree < 1) {
            next;
        }
        $serverInfo{$opt_outserver}{$thisPart}{'free'} = $thisFree;
        $serverInfo{$opt_outserver}{$thisPart}{'tot'}  = $thisTot;
        $serverInfo{$opt_outserver}{$thisPart}{'freelimit'}
          = $opt_freelimit * $thisTot;
        $partCnt++;
    }
}

if ($partCnt == 0) {
    print("ERROR: no partition information found.\n");
    exit 1;
}

my $outFile = get_filename($opt_inserver, $opt_outserver);
open(my $out, '>', $outFile);
print("$outFile opened\n");
print($out "#!/bin/bash\n");
print($out "\n");

my $cnt = 0;
foreach my $p (sort keys %inPartInfo) {
    foreach my $v (sort keys %{ $inPartInfo{$p} }) {

        my $out_part = pick_partition($p, $inPartInfo{$p}{$v});
        if (!$out_part) {
            printf($out
                  "echo \"No room for %s from %s %s on %s ... skipping.\n",
                $v, $opt_inserver, $p, $opt_outserver);
            next;
        }

        print($out "echo \" \"\n");
        print($out "echo \"-----------------------------------------\"\n");
        print($out "if [ -e ./stopromove ] \n");
        print($out "    then\n");
        print($out "    echo \"stopromove found.  Exiting.\"\n");
        print($out "    exit\n");
        print($out "else\n");
        print($out "    echo \"stopromove not found---continuing.\"\n");
        print($out "fi\n");
        printf($out "echo \"Move %d - size %d\"\n", $cnt, $inPartInfo{$p}{$v});
        printf($out "echo \"Moving %s from %s %s to %s %s\"\n",
            $v, $opt_inserver, $p, $opt_outserver, $out_part);
        print($out "date\n");
        print(  $out "/ncsd/batch/mvto -s $v "
              . "$opt_inserver $p "
              . "$opt_outserver $out_part \n");
        $cnt++;
    }
}
print($out "# \n");
print($out "# $cnt moves in all\n");

close $out;

print("$cnt moves in all.\n");

if ($opt_update) {
    chmod 0755, $outFile;
    system($outFile);
}

exit;

__END__

##############################################################################
# Documentation
##############################################################################

=for stopwords
LSDB afs listvol mkmove mvto pm ro sqllist vos

=head1 NAME

afs-mkmove-ro

=head1 SYNOPSIS

 afs-mkmove-ro --inserver=host [--inparts=partition-list] \
                --outserver=host [--outparts=partition-list] \
                [--vollist=filename] [--sqllist] \
                [--update] [--debug] [--help] [--manual]

=head1 DESCRIPTION

This script uses mvto to move read only partitions from one AFS server
to another.  The script does not check for free space on the target
server/partition.

The movements are sorted so that the smallest volumes are moved first.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --inserver=hostname

Name of the source AFS server.

=item --inparts=parition-list

A comma separated list of partitions.  Optional.  If not specified
then the whole server will be scanned.

=item --outserver=hostname

Name of the destination AFS server.

=item --outparts=paritition-list

A comma separate list of partitions.  Optional.  If not specified then
the source partition is used.  Note, specifying a target partition
with out specifying a source partition will move all of the read only
partitions from the source server to a single partition on the
destination server.

=item --voslist=filename

The output of listvol for the input server.  If not specified then a
vos listvol listing will be generated.

=item --sqllist

If specified then the AFS database on LSDB will be used to get a list
of input volumes to move.  This database is updated once a day at
about 6 pm.

=item --debug

Turns on debugging displays.

=item --manual

Print complete documentation.

=back

=head1 COPYRIGHT

Copyright 2008-2015 The Board of Trustees of the Leland Stanford
Junior University.

Copyright 2018, 2024 Bill MacAllister <bill@ca-zephyr.org>.

=head1 LICENSE

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=head1 AUTHOR

Bill MacAllister <whm@stanford.edu>

=cut

