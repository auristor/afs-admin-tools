Index: afs-admin-tools/frak
===================================================================
--- afs-admin-tools.orig/frak	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/frak	2024-07-23 17:36:17.064011709 +0000
@@ -35,11 +35,11 @@
 use vars qw($CHANGEDIR $CROSSMOUNT $DEBUG $LOGFILE $MUNGE $NODIFF $QUIET
   $ROOTRO $ROOTRW);
 
-use Cwd qw(cwd);
-use File::Find qw(find);
-use File::stat qw(lstat);
+use Cwd          qw(cwd);
+use File::Find   qw(find);
+use File::stat   qw(lstat);
 use Getopt::Long qw(GetOptions);
-use POSIX qw(strftime);
+use POSIX        qw(strftime);
 use Stat::lsMode qw(format_mode);
 
 ##############################################################################
@@ -54,7 +54,7 @@
 
 # The full path to fs and vos.  vos may be in an sbin directory, which may
 # not be on the user's path by default, so check there first.
-our $FS = 'fs';
+our $FS  = 'fs';
 our $VOS = grep { -x $_ } qw(/usr/local/sbin/vos /usr/sbin/vos);
 $VOS ||= 'vos';
 
@@ -681,11 +681,11 @@
 
     # Do the analysis, or rather call all the individual functions that do the
     # analysis.
-    if (!$roinfo{stat}) { compare_new(\%rwinfo) }
-    elsif ($rwinfo{islink}) { compare_link(\%rwinfo, \%roinfo) }
+    if    (!$roinfo{stat})          { compare_new(\%rwinfo) }
+    elsif ($rwinfo{islink})         { compare_link(\%rwinfo, \%roinfo) }
     elsif (defined $rwinfo{volume}) { compare_mount(\%rwinfo, \%roinfo) }
-    elsif ($rwinfo{isdir}) { compare_dir(\%rwinfo, \%roinfo) }
-    else                   { compare_file(\%rwinfo, \%roinfo) }
+    elsif ($rwinfo{isdir})          { compare_dir(\%rwinfo, \%roinfo) }
+    else                            { compare_file(\%rwinfo, \%roinfo) }
 }
 
 # Compare in the reverse direction (read-only to read/write).  The only thing
Index: afs-admin-tools/mvto
===================================================================
--- afs-admin-tools.orig/mvto	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/mvto	2024-07-23 17:36:17.064011709 +0000
@@ -36,7 +36,7 @@
 use vars qw($JUSTPRINT);
 use subs qw(system);
 
-use Date::Parse qw(str2time);
+use Date::Parse  qw(str2time);
 use Getopt::Long qw(GetOptions);
 
 # This will be set to -localauth if that flag should be added to vos
@@ -434,7 +434,7 @@
     my @to = ($toserver, $topart);
     my ($fromserver, $frompart) = ($$volinfo{rwserver}, $$volinfo{rwpart});
     my @from = ($fromserver, $frompart);
-    my %ro = %{ $$volinfo{ro} };
+    my %ro   = %{ $$volinfo{ro} };
 
     # If the volume is replicated and the read/write is already on the right
     # server, we won't actually move it.  Just make sure there's also a
@@ -581,7 +581,7 @@
 sub move_single {
     my ($volume, $force, @location) = @_;
     my @source = findpartition(splice(@location, 0, 2));
-    my @dest = findpartition(@location);
+    my @dest   = findpartition(@location);
 
     # Get and display information about the volume.
     my %volinfo = volinfo($volume);
Index: afs-admin-tools/volcreate
===================================================================
--- afs-admin-tools.orig/volcreate	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/volcreate	2024-07-23 17:36:17.064011709 +0000
@@ -66,7 +66,7 @@
 
 # The full path to fs and vos.  vos may be in an sbin directory, which may
 # not be on the user's path by default, so check there first.
-our $FS = 'fs';
+our $FS  = 'fs';
 our $VOS = grep { -x $_ } qw(/usr/local/sbin/vos /usr/sbin/vos);
 $VOS ||= 'vos';
 
Index: afs-admin-tools/volcreate-logs
===================================================================
--- afs-admin-tools.orig/volcreate-logs	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/volcreate-logs	2024-07-23 17:36:17.064011709 +0000
@@ -26,7 +26,7 @@
 use subs qw(system);
 
 use Getopt::Long qw(GetOptions);
-use POSIX qw(strftime);
+use POSIX        qw(strftime);
 
 # AFS::Utils is loaded to get the setpag function if a ticket cache is
 # specified on the command line.
@@ -54,7 +54,7 @@
 
 # The full path to fs and vos.  vos may be in an sbin directory, which may
 # not be on the user's path by default, so check there first.
-our $FS = 'fs';
+our $FS  = 'fs';
 our $VOS = grep { -x $_ } qw(/usr/local/sbin/vos /usr/sbin/vos);
 $VOS ||= 'vos';
 
@@ -154,10 +154,10 @@
 
 sub display_kbytes {
     my ($quota_kbytes) = @_;
-    my @sizes = ('T', 'G', 'M');
-    my $quota = "${quota_kbytes}K";
-    my $i     = $quota_kbytes;
-    my $u     = 'K';
+    my @sizes          = ('T', 'G', 'M');
+    my $quota          = "${quota_kbytes}K";
+    my $i              = $quota_kbytes;
+    my $u              = 'K';
     while ($i > 1024) {
         if (@sizes) {
             $i     = $i / 1024;
@@ -244,7 +244,7 @@
     my ($volume, $path);
     if (-d "$base/$year/$month") {
         $volume = lsmount("$base/$year/$month");
-        $path = "$base/$year/$month" if defined $volume;
+        $path   = "$base/$year/$month" if defined $volume;
     }
     return ($volume, $path);
 }
@@ -335,7 +335,7 @@
     my ($year, $month, $config, $quiet) = @_;
     my ($path, $volume);
     if ($$config{type} eq 'monthly') {
-        $path = sprintf("$$config{path}/%04d/%02d", $year, $month);
+        $path   = sprintf("$$config{path}/%04d/%02d", $year, $month);
         $volume = sprintf("%s.%04d%02d", $$config{name}, $year, $month);
         if (!-d "$$config{path}/$year") {
             if ($JUSTPRINT) {
@@ -347,7 +347,7 @@
             }
         }
     } elsif ($$config{type} eq 'yearly') {
-        $path = sprintf("$$config{path}/%04d", $year);
+        $path   = sprintf("$$config{path}/%04d", $year);
         $volume = sprintf("%s.%04d", $$config{name}, $year);
     }
     if (!-d $path) {
@@ -383,7 +383,7 @@
             }
         }
         my ($key, $value) = split(/:\s+/, $_, 2);
-        $key =~ s/^\s+//;
+        $key   =~ s/^\s+//;
         $value =~ s/\s+$//;
         if (!$value) {
             warn "Parse error in log group on line $.\n";
@@ -463,7 +463,7 @@
         $ticket = $LOGS_TICKETS . '/' . $ticket;
     }
     $ENV{KRB5CCNAME} = $ticket;
-    AFS::Utils::setpag() or die "$0: unable to setpag: $!";
+    AFS::Utils::setpag()      or die "$0: unable to setpag: $!";
     CORE::system($AKLOG) == 0 or die "$0: unable to obtain tokens";
 }
 
Index: afs-admin-tools/volnuke
===================================================================
--- afs-admin-tools.orig/volnuke	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/volnuke	2024-07-23 17:36:17.064011709 +0000
@@ -33,9 +33,9 @@
 use strict;
 use warnings;
 
-use Date::Parse qw(str2time);
+use Date::Parse  qw(str2time);
 use Getopt::Long qw(GetOptions);
-use POSIX qw(strftime);
+use POSIX        qw(strftime);
 
 ##############################################################################
 # Site configuration
@@ -50,7 +50,7 @@
 
 # The full path to fs and vos.  vos may be in an sbin directory, which may
 # not be on the user's path by default, so check there first.
-our $FS = 'fs';
+our $FS  = 'fs';
 our $VOS = grep { -x $_ } qw(/usr/local/sbin/vos /usr/sbin/vos);
 $VOS ||= 'vos';
 
Index: afs-admin-tools/partinfo
===================================================================
--- afs-admin-tools.orig/partinfo	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/partinfo	2024-07-23 17:36:17.064011709 +0000
@@ -124,7 +124,7 @@
     my $usable = int($free - ((100 - $PARTINFO_FULL) / 100) * $total);
     my $pfree  = 100 * $used / $total;
     my $cstart = $color ? choose_color($pfree) : '';
-    my $cend   = $color ? color('reset') : '';
+    my $cend   = $color ? color('reset')       : '';
     my $fmt    = "%17s: %10d %10d %10d %s%7.2f%%%s %10d\n";
     if ($opt_human) {
         $total  = human_bytes($total * 1024);
Index: afs-admin-tools/fsr
===================================================================
--- afs-admin-tools.orig/fsr	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/fsr	2024-07-23 17:36:17.064011709 +0000
@@ -26,7 +26,7 @@
 
 use vars qw($CROSSMOUNTS $NOMOUNTS $VERBOSE);
 
-use File::Find qw(find);
+use File::Find   qw(find);
 use Getopt::Long qw(GetOptions);
 
 # We fork fs lsmount inside a grep (in File::Find) and expect to be able to do
Index: afs-admin-tools/lsmounts
===================================================================
--- afs-admin-tools.orig/lsmounts	2024-07-23 17:36:17.076012271 +0000
+++ afs-admin-tools/lsmounts	2024-07-23 17:36:17.064011709 +0000
@@ -27,8 +27,8 @@
 use strict;
 use warnings;
 
-use Cwd qw(cwd);
-use File::Find qw(find);
+use Cwd          qw(cwd);
+use File::Find   qw(find);
 use Getopt::Long qw(GetOptions);
 
 my $count;
