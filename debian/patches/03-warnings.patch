Index: afs-admin-tools/afs-mkmove-ro
===================================================================
--- afs-admin-tools.orig/afs-mkmove-ro	2024-07-23 18:46:14.577525950 +0000
+++ afs-admin-tools/afs-mkmove-ro	2024-07-23 18:48:33.024054546 +0000
@@ -3,6 +3,7 @@
 use Getopt::Long;
 use Pod::Usage;
 use strict;
+use warnings;
 
 use vars qw(
             @inParts
@@ -61,7 +62,7 @@
 
 sub sql_list {
 
-    my $sql = "SELECT server, part, volname, used FROM volumes " 
+    my $sql = "SELECT server, part, volname, used FROM volumes "
         . "WHERE server = '$opt_inserver' "
         . "AND type = 'RO' ";
     if ($opt_inparts) {
@@ -70,7 +71,7 @@
         foreach my $p (@inParts) {
             my $qpart = $p;
             $qpart = "/vicep$p" if length($p) == 1;
-            $sql .= "${word}part = '$qpart'"; 
+            $sql .= "${word}part = '$qpart'";
             $word = ' OR ';
         }
         $sql .= ')';
@@ -89,7 +90,7 @@
 }
 
 # ---------------------------
-# Read and parse vos listvol output 
+# Read and parse vos listvol output
 
 sub vos_list {
 
@@ -101,11 +102,11 @@
     }
 
     my $thisPart = '';
-    open infile, "<$thisFile";
-    while (<infile>) {
+    open(my $infile, '<', $thisFile);
+    while (<$infile>) {
         chomp;
         my $inline = $_;
-        
+
         if ($inline =~ /partition\s+\/vicep(\w+):\s+/) {
             $thisPart = $1;
             next;
@@ -119,14 +120,14 @@
         }
     }
 
-    close infile;
+    close $infile;
 }
 
 # ---------------------------
 # Pick a partition
 
 sub pick_partition  {
-    
+
     my ($in_part, $this_size) = @_;
 
     my $return_part = '';
@@ -224,7 +225,7 @@
             print "Getting a volume list of $opt_inserver $p ...\n";
             system ($cmd);
             vos_list($list);
-        } 
+        }
     } else {
         my $list = "vollist-${opt_inserver}-".get_datetime().".txt";
         my $cmd = "vos listvol $opt_inserver > $list";
@@ -247,7 +248,7 @@
         if ($thisFree < 1) {next;}
         $serverInfo{$opt_outserver}{$thisPart}{'free'} = $thisFree;
         $serverInfo{$opt_outserver}{$thisPart}{'tot'}  = $thisTot;
-        $serverInfo{$opt_outserver}{$thisPart}{'freelimit'} = 
+        $serverInfo{$opt_outserver}{$thisPart}{'freelimit'} =
             $opt_freelimit * $thisTot;
         $partCnt++;
     }
@@ -259,10 +260,10 @@
 }
 
 my $outFile = get_filename ($opt_inserver, $opt_outserver);
-open out, ">$outFile";
+open(my $out, '>', $outFile);
 print "$outFile opened\n";
-print out "#!/bin/bash\n";
-print out "\n";
+print $out "#!/bin/bash\n";
+print $out "\n";
 
 my $cnt = 0;
 foreach my $p (sort keys %inPartInfo) {
@@ -275,30 +276,30 @@
             next;
         }
 
-        print out "echo \" \"\n";
-        print out "echo \"-----------------------------------------\"\n";
-        print out "if [ -e ./stopromove ] \n";
-        print out "    then\n";
-        print out "    echo \"stopromove found.  Exiting.\"\n";
-        print out "    exit\n";
-        print out "else\n";
-        print out "    echo \"stopromove not found---continuing.\"\n";
-        print out "fi\n";
-        printf (out "echo \"Move %d - size %d\"\n", 
+        print $out "echo \" \"\n";
+        print $out "echo \"-----------------------------------------\"\n";
+        print $out "if [ -e ./stopromove ] \n";
+        print $out "    then\n";
+        print $out "    echo \"stopromove found.  Exiting.\"\n";
+        print $out "    exit\n";
+        print $out "else\n";
+        print $out "    echo \"stopromove not found---continuing.\"\n";
+        print $out "fi\n";
+        printf (out "echo \"Move %d - size %d\"\n",
                 $cnt, $inPartInfo{$p}{$v});
         printf (out "echo \"Moving %s from %s %s to %s %s\"\n",
                 $v, $opt_inserver, $p, $opt_outserver, $out_part);
-        print out "date\n";
-        print out "/ncsd/batch/mvto -s $v " 
+        print $out "date\n";
+        print $out "/ncsd/batch/mvto -s $v "
             . "$opt_inserver $p "
             . "$opt_outserver $out_part \n";
         $cnt++;
     }
 }
-print out "# \n";
-print out "# $cnt moves in all\n";
+print $out "# \n";
+print $out "# $cnt moves in all\n";
 
-close out;
+close $out;
 
 print "$cnt moves in all.\n";
 
@@ -320,7 +321,7 @@
  afs-mkmove-ro.pl --inserver=host [--inparts=partition-list] \
                   --outserver=host [--outparts=partition-list] \
                   [--vollist=filename] [--sqllist] \
-                  [--update] [--debug] [--help] [--manual] 
+                  [--update] [--debug] [--help] [--manual]
 
 =head1 DESCRIPTION
 
@@ -353,7 +354,7 @@
 the source partition is used.  Note, specifying a target partition
 with out specifying a source partition will move all of the read only
 partitions from the source server to a single partiton on the
-destination server.  
+destination server.
 
 =item --voslist=filename
 
@@ -382,4 +383,4 @@
 
 =cut
 
- 
+
Index: afs-admin-tools/afs-mkmove-rw
===================================================================
--- afs-admin-tools.orig/afs-mkmove-rw	2024-07-23 18:46:14.577525950 +0000
+++ afs-admin-tools/afs-mkmove-rw	2024-07-23 18:48:39.000336350 +0000
@@ -11,6 +11,7 @@
 use Getopt::Long;
 use Pod::Usage;
 use strict;
+use warnings;
 
 use vars qw(
             $opt_debug
@@ -112,7 +113,7 @@
 
 my $delete_list = '';
 if ($opt_inserver) {
-    $opt_list = "vollist-${opt_inserver}-" 
+    $opt_list = "vollist-${opt_inserver}-"
         . get_datetime() . ".txt";
     $delete_list = $opt_list;
     if (length($opt_inpart) == 0) {
@@ -149,9 +150,9 @@
     }
 }
 
-open infile, "<$opt_list";
-my %parts = ();    
-while (<infile>) {
+open(my $infile, '<', $opt_list);
+my %parts = ();
+while (<$infile>) {
     chomp;
     my $inline = $_;
     if ($inline =~ /([\w\d\.\-]+)\s+\d+\s+RW\s+(\d+)\s+\w+\s+On\-line/) {
@@ -162,7 +163,7 @@
     }
 }
 
-close infile;
+close $infile;
 
 my $outOpened = 0;
 my @outFileList = ();
@@ -173,12 +174,12 @@
 
 my $outFile = get_filename($opt_outserver, $this_part);
 push @outFileList, $outFile;
-open out, ">$outFile";
+open(my $out, '>', $outFile);
 print "$outFile opened\n";
-print out "#!/bin/bash\n";
-print out "\n";
-print out "# ===============================================\n";
-print out "# space available: $out_part_limit{$this_part} for "
+print $out "#!/bin/bash\n";
+print $out "\n";
+print $out "# ===============================================\n";
+print $out "# space available: $out_part_limit{$this_part} for "
     . " partition $this_part\n";
 $outOpened = 1;
 
@@ -190,20 +191,20 @@
 foreach my $sk (keys %parts) {
     foreach my $v (sort keys %{$parts{$sk}}) {
         my $this_size = $parts{$sk}{$v};
-        while ($out_part_size{$this_part}+$this_size 
+        while ($out_part_size{$this_part}+$this_size
                > $out_part_limit{$this_part}) {
-            print out "# \n";
+            print $out "# \n";
             $part_index++;
             if ($part_index >= scalar(@part_list)) {
-                print out "# ==============================================\n";
-                print out "# No available space left.  Exiting.\n";
+                print $out "# ==============================================\n";
+                print $out "# No available space left.  Exiting.\n";
                 print "# ==============================================\n";
                 print "# No available space left.  Exiting.\n";
                 exit;
             }
             $this_part = $part_list[$part_index];
-            print out "# ===============================================\n";
-            print out "# space available: $out_part_limit{$this_part} for "
+            print $out "# ===============================================\n";
+            print $out "# space available: $out_part_limit{$this_part} for "
                 . " partition $this_part\n";
         }
 
@@ -223,31 +224,31 @@
 
         $cnt++;
         $out_part_size{$this_part} += $this_size;
-        print out "echo \" \"\n";
-        print out "echo \"=========================================\"\n";
-        print out "if [ -e ./stopmove ] \n";
-        print out "    then\n";
-        print out "    echo \"stopmove found.  Exiting.\"\n";
-        print out "    exit\n";
-        print out "else\n";
-        print out "    echo \"stopmove not found---continuing.\"\n";
-        print out "fi\n";
-        printf (out "echo \"Moving %s - move %d - size %d\"\n", 
+        print $out "echo \" \"\n";
+        print $out "echo \"=========================================\"\n";
+        print $out "if [ -e ./stopmove ] \n";
+        print $out "    then\n";
+        print $out "    echo \"stopmove found.  Exiting.\"\n";
+        print $out "    exit\n";
+        print $out "else\n";
+        print $out "    echo \"stopmove not found---continuing.\"\n";
+        print $out "fi\n";
+        printf ($out "echo \"Moving %s - move %d - size %d\"\n",
                 $v, $cnt,  $sk);
-        print out "date\n";
+        print $out "date\n";
         my $cmd = "/ncsd/batch/mvto $v "
             . "$opt_outserver $this_part "
             . $replicaList;
-        print out "echo \"Executing: $cmd\"\n";
-        print out "$cmd\n";
-        
+        print $out "echo \"Executing: $cmd\"\n";
+        print $out "$cmd\n";
+
     }
 }
 
 if ($outOpened) {
-    print out "# \n";
-    print out "# $cnt moves\n";
-    close out;
+    print $out "# \n";
+    print $out "# $cnt moves\n";
+    close $out;
     $outOpened = 0;
 }
 
@@ -344,4 +345,4 @@
 
 =cut
 
- 
+
